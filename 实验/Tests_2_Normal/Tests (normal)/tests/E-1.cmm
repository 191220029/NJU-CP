int O_ADD;
int O_PRD;
int O_SUB;
int O_DIV;
struct Operation {
    int oType;
    int opt;
};

int T_INT;
int T_FLT;
struct BinData {
    int   bdType;
    int   bdIData[2];
    float bdFData[2];
};

int MLEN;
struct MulData {
    int   mdType;
    int   mdIData[100];
    float mdFData[100];
};

struct Result {
    int   rType;
    int   valid;
    int   iRes;
    float fRes;
};

int initArith() {
    O_ADD = 0;
    O_PRD = 1;
    O_SUB = 2;
    O_DIV = 3;
    T_INT = 4;
    T_FLT = 5;
    MLEN  = 100;
    return 0;
}

struct Result binOperator(int bOperation, int binData[2]);

struct Result binOperator(struct Operation bOperation, struct BinData binData) {
    struct Result bOpRes;
    bOpRes.valid = 1;
    if (bOperation.opt == O_ADD) {
        bOpRes.iRes = binData.bdIData[0] + binData.bdIData[1];
        bOpRes.fRes = binData.bdFData[0] + binData.bdFData[1];
    } else if (bOperation.opt == O_PRD) {
        bOpRes.iRes = binData.bdIData[0] * binData.bdIData[1];
        bOpRes.fRes = binData.bdFData[0] * binData.bdFData[1];
    } else if (bOperation.opt == O_SUB) {
        bOpRes.iRes = binData.bdIData[0] - binData.bdIData[1];
        bOpRes.fRes = binData.bdFData[0] - binData.bdFData[1];
    } else if (bOperation.opt == O_DIV) {
        bOpRes.iRes = binData.bdIData[0] / binData.bdIData[1];
        bOpRes.fRes = binData.bdFData[0] / binData.bdFData[1];
    } else {
        bOpRes.valid = 0; 
    }
    bOpRes.valid = bOpRes.valid && (bOperation.oType == binData.bdType);
    bOpRes.rType = bOperation.oType;
    return bOpRes;
}

struct Result mulOperation(struct Operation mOperation, struct MulData mulData);

int equal(struct MulData mulData1, struct MulData mulData2);

int main() {
    struct Operation opn;
    struct MulData data1;
    struct MulData data2;
    mulOperation(opn, data1);
    mulOperation(opn, data2);
    return equal(data1, data2);
}
